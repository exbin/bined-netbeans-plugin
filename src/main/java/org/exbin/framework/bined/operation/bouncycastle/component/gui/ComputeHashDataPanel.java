/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.bined.operation.bouncycastle.component.gui;

import java.util.List;
import java.util.Optional;
import java.util.ResourceBundle;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import org.exbin.framework.bined.operation.bouncycastle.component.ComputeHashDataMethod;
import org.exbin.framework.utils.LanguageUtils;
import org.exbin.framework.utils.WindowUtils;

/**
 * Compute hash from provided data component panel.
 *
 * @author ExBin Project (https://exbin.org)
 */
@ParametersAreNonnullByDefault
public class ComputeHashDataPanel extends javax.swing.JPanel {

    private final java.util.ResourceBundle resourceBundle = LanguageUtils.getResourceBundleByClass(ComputeHashDataPanel.class);

    private Controller controller;
    private ModeChangeListener modeChangeListener = null;
    private HashTypeChangeListener hashTypeChangeListener = null;

    public ComputeHashDataPanel() {
        initComponents();
        init();
    }

    private void init() {
        DefaultListModel<String> hashTypesModel = new DefaultListModel<>();
        for (ComputeHashDataMethod.HashType hashType : ComputeHashDataMethod.HashType.values()) {
            hashTypesModel.addElement(hashType.name());
        }
        hashTypeList.setModel(hashTypesModel);
        hashBitSizeComboBox.setModel(new DefaultComboBoxModel<>());
    }

    @Nonnull
    public ResourceBundle getResourceBundle() {
        return resourceBundle;
    }

    public void setController(Controller controller) {
        this.controller = controller;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        hashTypeLabel = new javax.swing.JLabel();
        hashTypeScrollPane = new javax.swing.JScrollPane();
        hashTypeList = new javax.swing.JList<>();
        hashBitSizeLabel = new javax.swing.JLabel();
        hashBitSizeComboBox = new javax.swing.JComboBox<>();

        hashTypeLabel.setText(resourceBundle.getString("hashTypeLabel.text")); // NOI18N

        hashTypeList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        hashTypeList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                hashTypeListValueChanged(evt);
            }
        });
        hashTypeScrollPane.setViewportView(hashTypeList);

        hashBitSizeLabel.setText(resourceBundle.getString("hashBitSizeLabel.text")); // NOI18N

        hashBitSizeComboBox.setEnabled(false);
        hashBitSizeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                hashBitSizeComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(hashTypeScrollPane)
                    .addComponent(hashBitSizeComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 405, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hashTypeLabel)
                            .addComponent(hashBitSizeLabel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hashTypeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hashTypeScrollPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hashBitSizeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hashBitSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void hashTypeListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_hashTypeListValueChanged
        modeChanged();
        hashTypeChanged();
    }//GEN-LAST:event_hashTypeListValueChanged

    private void hashBitSizeComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_hashBitSizeComboBoxItemStateChanged
        modeChanged();
    }//GEN-LAST:event_hashBitSizeComboBoxItemStateChanged

    private void modeChanged() {
        if (modeChangeListener != null) {
            modeChangeListener.modeChanged();
        }
    }

    private void hashTypeChanged() {
        if (hashTypeChangeListener != null) {
            hashTypeChangeListener.hashTypeChanged();
        }
    }

    @Nonnull
    public Optional<ComputeHashDataMethod.HashType> getHashType() {
        int selectedIndex = hashTypeList.getSelectedIndex();
        return selectedIndex >= 0 ? Optional.of(ComputeHashDataMethod.HashType.values()[selectedIndex]) : Optional.empty();
    }

    public void setHashType(ComputeHashDataMethod.HashType hashType) {
        hashTypeList.setSelectedIndex(hashType.ordinal());
    }

    public int getBitSize() {
        int selectedIndex = hashBitSizeComboBox.getSelectedIndex();
        if (selectedIndex >= 0) {
            return (Integer) hashBitSizeComboBox.getSelectedItem();
        }
        return 0;
    }

    public void setBitSizes(@Nullable List<Integer> bitSizes) {
        DefaultComboBoxModel<Integer> bitSizeModel = (DefaultComboBoxModel<Integer>) hashBitSizeComboBox.getModel();
        bitSizeModel.removeAllElements();

        if (bitSizes != null && !bitSizes.isEmpty()) {
            for (Integer bitSize : bitSizes) {
                bitSizeModel.addElement(bitSize);
            }
            hashBitSizeComboBox.setEnabled(true);
        } else {
            hashBitSizeComboBox.setEnabled(false);
        }
    }

    public void setModeChangeListener(ModeChangeListener modeChangeListener) {
        this.modeChangeListener = modeChangeListener;
    }

    public void setHashTypeChangeListener(HashTypeChangeListener hashTypeChangeListener) {
        this.hashTypeChangeListener = hashTypeChangeListener;
    }

    public void initFocus() {
        hashTypeList.requestFocus();
    }

    public void acceptInput() {
    }

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        WindowUtils.invokeDialog(new ComputeHashDataPanel());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Integer> hashBitSizeComboBox;
    private javax.swing.JLabel hashBitSizeLabel;
    private javax.swing.JLabel hashTypeLabel;
    private javax.swing.JList<String> hashTypeList;
    private javax.swing.JScrollPane hashTypeScrollPane;
    // End of variables declaration//GEN-END:variables

    public interface Controller {

    }

    public interface ModeChangeListener {

        void modeChanged();
    }
    
    public interface HashTypeChangeListener {

        void hashTypeChanged();
    }
}

/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.bined.operation.component.gui;

import java.util.ResourceBundle;
import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;
import org.exbin.bined.CodeAreaUtils;
import org.exbin.framework.bined.operation.component.RandomDataMethod;
import org.exbin.framework.utils.LanguageUtils;
import org.exbin.framework.utils.WindowUtils;

/**
 * Random data component panel.
 *
 * @author ExBin Project (https://exbin.org)
 */
@ParametersAreNonnullByDefault
public class RandomDataPanel extends javax.swing.JPanel {

    private final java.util.ResourceBundle resourceBundle = LanguageUtils.getResourceBundleByClass(RandomDataPanel.class);

    private ModeChangeListener modeChangeListener = null;

    public RandomDataPanel() {
        initComponents();
    }

    @Nonnull
    public ResourceBundle getResourceBundle() {
        return resourceBundle;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        lengthLabel = new javax.swing.JLabel();
        lengthBaseSwitchableSpinnerPanel = new org.exbin.framework.bined.gui.BaseSwitchableSpinnerPanel();
        randomDataLabel = new javax.swing.JLabel();
        fullBytesRadioButton = new javax.swing.JRadioButton();
        lowerHalfRadioButton = new javax.swing.JRadioButton();
        alphabetOnlyRadioButton = new javax.swing.JRadioButton();
        numberDigitsRadioButton = new javax.swing.JRadioButton();

        lengthLabel.setText(resourceBundle.getString("lengthLabel.text")); // NOI18N

        lengthBaseSwitchableSpinnerPanel.setValue(10L);
        lengthBaseSwitchableSpinnerPanel.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                lengthBaseSwitchableSpinnerPanelStateChanged(evt);
            }
        });

        randomDataLabel.setText(resourceBundle.getString("randomDataLabel.text")); // NOI18N

        buttonGroup.add(fullBytesRadioButton);
        fullBytesRadioButton.setSelected(true);
        fullBytesRadioButton.setText(resourceBundle.getString("fullBytesRadioButton.text")); // NOI18N
        fullBytesRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fullBytesRadioButtonItemStateChanged(evt);
            }
        });

        buttonGroup.add(lowerHalfRadioButton);
        lowerHalfRadioButton.setText(resourceBundle.getString("lowerHalfRadioButton.text")); // NOI18N
        lowerHalfRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                lowerHalfRadioButtonItemStateChanged(evt);
            }
        });

        buttonGroup.add(alphabetOnlyRadioButton);
        alphabetOnlyRadioButton.setText(resourceBundle.getString("alphabetOnlyRadioButton.text")); // NOI18N
        alphabetOnlyRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                alphabetOnlyRadioButtonItemStateChanged(evt);
            }
        });

        buttonGroup.add(numberDigitsRadioButton);
        numberDigitsRadioButton.setText(resourceBundle.getString("numberDigitsRadioButton.text")); // NOI18N
        numberDigitsRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                numberDigitsRadioButtonItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lengthBaseSwitchableSpinnerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 597, Short.MAX_VALUE)
                    .addComponent(lowerHalfRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fullBytesRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lengthLabel)
                            .addComponent(randomDataLabel))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(alphabetOnlyRadioButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(numberDigitsRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lengthLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lengthBaseSwitchableSpinnerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(randomDataLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fullBytesRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lowerHalfRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(alphabetOnlyRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(numberDigitsRadioButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void lengthBaseSwitchableSpinnerPanelStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_lengthBaseSwitchableSpinnerPanelStateChanged
        modeChanged();
    }//GEN-LAST:event_lengthBaseSwitchableSpinnerPanelStateChanged

    private void fullBytesRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fullBytesRadioButtonItemStateChanged
        modeChanged();
    }//GEN-LAST:event_fullBytesRadioButtonItemStateChanged

    private void lowerHalfRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_lowerHalfRadioButtonItemStateChanged
        modeChanged();
    }//GEN-LAST:event_lowerHalfRadioButtonItemStateChanged

    private void alphabetOnlyRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_alphabetOnlyRadioButtonItemStateChanged
        modeChanged();
    }//GEN-LAST:event_alphabetOnlyRadioButtonItemStateChanged

    private void numberDigitsRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_numberDigitsRadioButtonItemStateChanged
        modeChanged();
    }//GEN-LAST:event_numberDigitsRadioButtonItemStateChanged

    private void modeChanged() {
        if (modeChangeListener != null) {
            modeChangeListener.modeChanged();
        }
    }

    @Nonnull
    public RandomDataMethod.AlgorithmType getAlgorithmType() {
        if (lowerHalfRadioButton.isSelected()) {
            return RandomDataMethod.AlgorithmType.LOWER_HALF;
        } else if (alphabetOnlyRadioButton.isSelected()) {
            return RandomDataMethod.AlgorithmType.ALPHABET_ONLY;
        } else if (numberDigitsRadioButton.isSelected()) {
            return RandomDataMethod.AlgorithmType.NUMBER_DIGITS;
        }

        return RandomDataMethod.AlgorithmType.FULL_BYTES;
    }

    public void setFillWith(RandomDataMethod.AlgorithmType algorithm) {
        switch (algorithm) {
            case FULL_BYTES: {
                fullBytesRadioButton.setSelected(true);
                break;
            }
            case LOWER_HALF: {
                lowerHalfRadioButton.setSelected(true);
                break;
            }
            case ALPHABET_ONLY: {
                alphabetOnlyRadioButton.setSelected(true);
                break;
            }
            case NUMBER_DIGITS: {
                numberDigitsRadioButton.setSelected(true);
                break;
            }
            default:
                throw CodeAreaUtils.getInvalidTypeException(algorithm);
        }
    }

    public long getDataLength() {
        return lengthBaseSwitchableSpinnerPanel.getValue();
    }

    public void setDataLength(long dataLength) {
        lengthBaseSwitchableSpinnerPanel.setValue(dataLength);
    }

    public void setModeChangeListener(ModeChangeListener modeChangeListener) {
        this.modeChangeListener = modeChangeListener;
    }

    public void initFocus() {
        lengthBaseSwitchableSpinnerPanel.initFocus();
    }

    public void acceptInput() {
        lengthBaseSwitchableSpinnerPanel.acceptInput();
    }

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        WindowUtils.invokeDialog(new RandomDataPanel());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton alphabetOnlyRadioButton;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JRadioButton fullBytesRadioButton;
    private org.exbin.framework.bined.gui.BaseSwitchableSpinnerPanel lengthBaseSwitchableSpinnerPanel;
    private javax.swing.JLabel lengthLabel;
    private javax.swing.JRadioButton lowerHalfRadioButton;
    private javax.swing.JRadioButton numberDigitsRadioButton;
    private javax.swing.JLabel randomDataLabel;
    // End of variables declaration//GEN-END:variables

    public interface ModeChangeListener {

        void modeChanged();
    }
}

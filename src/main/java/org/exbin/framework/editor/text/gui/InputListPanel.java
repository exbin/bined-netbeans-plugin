/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.editor.text.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.AbstractListModel;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import org.exbin.framework.utils.WindowUtils;

/**
 * Item list with text input.
 *
 * @version 0.2.0 2016/03/13
 * @author ExBin Project (http://exbin.org)
 */
public class InputListPanel extends javax.swing.JPanel {

    private ActionListener actionListener;
    private ChangeListener changeListener;
    private String[] items;
    private boolean textUpdating = false;

    public InputListPanel() {
        initComponents();
    }

    public void setItems(final String[] items) {
        this.items = items;
        itemList.setModel(new AbstractListModel<String>() {
            @Override
            public int getSize() {
                return items.length;
            }

            @Override
            public String getElementAt(int index) {
                return items[index];
            }
        });
        itemList.addListSelectionListener((ListSelectionEvent e) -> {
            if (!textUpdating) {
                String selectedValue = itemList.getSelectedValue();
                textField.setText(selectedValue);
            }
        });
        textField.addActionListener((ActionEvent e) -> {
            valueChanged();
        });
        textField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                valueChanged();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                valueChanged();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                valueChanged();
            }
        });
    }

    private void valueChanged() {
        String key = textField.getText().toLowerCase();
        if (!key.isEmpty()) {
            textUpdating = true;
            itemList.clearSelection();
            for (String item : items) {
                if (item.toLowerCase().startsWith(key)) {
                    itemList.setSelectedValue(item, true);
                    break;
                }
            }
            textUpdating = false;
        }

        if (changeListener != null) {
            changeListener.valueChanged();
        }
    }

    public JTextField getTextField() {
        return textField;
    }

    public void setChangeListener(final ChangeListener changeListener) {
        this.changeListener = changeListener;
    }

    public String getSelectedValue() {
        return textField.getText();
    }

    public void setSelectedValue(String item) {
        textField.setText(item);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textField = new javax.swing.JTextField();
        scrollPane = new javax.swing.JScrollPane();
        itemList = new javax.swing.JList<>();

        setName("Form"); // NOI18N

        textField.setName("textField"); // NOI18N

        scrollPane.setName("scrollPane"); // NOI18N

        itemList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        itemList.setName("itemList"); // NOI18N
        itemList.setVisibleRowCount(4);
        scrollPane.setViewportView(itemList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(textField)
            .addComponent(scrollPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        WindowUtils.invokeDialog(new InputListPanel());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> itemList;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTextField textField;
    // End of variables declaration//GEN-END:variables

    /**
     * Simple listener for value change.
     */
    public interface ChangeListener {

        void valueChanged();
    }
}

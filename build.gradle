import java.nio.file.*
import org.gradle.util.VersionNumber
//import java.util.jar.Pack200
import java.util.zip.GZIPOutputStream
import java.util.jar.JarFile
import java.util.jar.JarOutputStream
import java.security.MessageDigest
import java.util.zip.ZipFile

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        flatDir {
            dirs "lib"
        }
    }
    dependencies {
    	if (VersionNumber.parse(gradle.gradleVersion) >= VersionNumber.parse('5.0')) {
            classpath "cz.kubacki.gradle.plugins:gradle-nbm-plugin:1.18.0-dev.39.uncommitted+develop.f9fd71d"
    	} else {
            classpath "cz.kubacki.gradle.plugins:gradle-nbm-plugin:1.17.1-dev.6.uncommitted+3041178"
    	}
        gradleApi()
    }
}

plugins {
	id 'java'
	id 'maven-publish'
    id 'signing'
// Old publishing
//	id 'maven'
}

apply plugin: 'cz.kubacki.nbm'

ext.scriptFile = { String fileName ->
    return new File(new File(rootDir, 'gradle'), fileName)
}

version = '0.2.7-SNAPSHOT'
group = 'org.exbin.bined.netbeans'

sourceCompatibility = '1.8'
targetCompatibility = sourceCompatibility

ext {
    //    netbeansVersion = 'dev-SNAPSHOT'
    netbeansVersion = 'RELEASE82'
    binedLibraryVersion = '0.3.0-SNAPSHOT'
    binedAppLibraryVersion = '0.3.0-SNAPSHOT'
    exbinFrameworkVersion = '0.3.0-SNAPSHOT'
    binaryDataVersion = '0.3.0-SNAPSHOT'
    repositoryName = "bined-netbeans-plugin"
    nbmVersion = version.endsWith('-SNAPSHOT') ? version.substring(0, version.length() - 9) : version
    homePageUrl = 'https://bined.exbin.org/netbeans-plugin'
    deployUrl = 'https://bined.exbin.org/netbeans-plugin'
    deployName = 'BinEd NetBeans Plugin'
    deployDescription = 'Binary/Hex editor plugin for NetBeans platform'
}

//ext.packer = Pack200.newPacker()
//packer.properties()["pack.effort"] = "9"

repositories {
    mavenLocal()
    mavenCentral()
/*
    String nbRepo = netbeansVersion.endsWith('-SNAPSHOT')
    ? 'https://bits.netbeans.org/netbeans/trunk/new-maven-snapshot'
: 'https://bits.netbeans.org/nexus/content/groups/netbeans'
    maven { url nbRepo }
*/
    maven { url 'https://netbeans.apidesign.org/maven2' }
    maven { url 'https://repo.gradle.org/gradle/libs-releases-local' }
    flatDir {
        dirs("lib", "plugins")
    }
}

// apply plugin: 'nb-gradle-nbm'
// apply plugin: 'custom-java-compilers'
// apply plugin: 'nb-gradle-maven-publish'
// apply plugin: 'nbm-dependency-verifier'

compileJava.options.sourcepath = sourceSets.main.resources.sourceDirectories

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

def configureExec(task) {
    task.mainClass = mainClass
    task.classpath = sourceSets.main.runtimeClasspath
    if (hasProperty('appArgs')) {
        task.args appArgs
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    doFirst {
        options.fork = true
        if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
            if (VersionNumber.parse(gradle.gradleVersion) >= VersionNumber.parse('5.0')) {
                options.bootstrapClasspath = files("${System.properties['java.home']}/lib/rt.jar", "${System.properties['java.home']}/jre/lib/jsse.jar")
            } else {
                options.bootClasspath = "${System.properties['java.home']}/lib/rt.jar$File.pathSeparator${System.properties['java.home']}/jre/lib/jsse.jar"
            }
        }
    }
}

// Disable tests on build
if (!gradle.startParameter.taskNames.any {it.endsWith("test")}) {
    tasks.withType(Test) {enabled = false}
}

task testJar(type: Jar, dependsOn: testClasses) {
    if (VersionNumber.parse(gradle.gradleVersion) >= VersionNumber.parse('5.0')) {
        archiveClassifier = 'tests'
    	archiveBaseName = "test-${project.archivesBaseName}"
    } else {
    	classifier = 'tests'
    	archiveName = "test-${project.archivesBaseName}"
    }
    from sourceSets.test.output
}

compileTestJava.dependsOn(jar)

//def manifestClassPath() {
//    try {
//        return (configurations.runtime.collect { 'lib/' + it.getName() }).join(' ')
//    } catch (Exception) {
//        return ""
//    }
//}
//
//jar {
//    attributes(
////        'Main-Class': mainClass,
//        'Class-Path': manifestClassPath()
//    )
////    from sourceSets.modelBuilders.output
////    ext {
////        netBeansSourceSets = [sourceSets.main, sourceSets.modelBuilders]
////    }
//}

configurations {
    tests
}

sourceSets {
    main {
        java {
            srcDirs("${rootDir}/src/main/depjava")
        }
        resources {
            srcDirs("${rootDir}/src/main/languages", "${rootDir}/src/main/depresources")
        }
    }
}

javadoc {
    if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
        options.addBooleanOption('html5', true)
    }
}

task javadocJar (type: Jar, dependsOn: javadoc) {
    if (VersionNumber.parse(gradle.gradleVersion) >= VersionNumber.parse('5.0')) {
        archiveClassifier = 'javadoc'
    } else {
    	classifier = 'javadoc'
    }
        
    from javadoc.destinationDir
}

def tryGetProperty = { String name, String defaultValue ->
    return defaultValue
    //org.netbeans.gradle.build.PropertyUtils.getStringProperty(project, name, defaultValue)
}

jar.manifest {
    attributes(['OpenIDE-Module-Layer': 'org/exbin/bined/netbeans/layer.xml'])
}

task nbmFile (type: Jar, dependsOn: tasks.nbm) {
    if (VersionNumber.parse(gradle.gradleVersion) >= VersionNumber.parse('5.0')) {
        archiveClassifier = 'nbm'
    } else {
    	classifier = 'nbm'
    }

//    from tasks.nbm.outputFile
}

def packGZ(File jarToPack) {
    println jarToPack.getAbsolutePath()
    def targetPath = project.buildDir.getAbsolutePath() + "/libs"
    def name = jarToPack.getName()
    def newName = name.substring(0, name.length() - 4) + ".jar.pack.gz"
    def newFile = new File(targetPath, newName)
    def os = new GZIPOutputStream(new FileOutputStream(newFile))
    packer.pack new JarFile(jarToPack), os
    os.close()
    
    def messageDigest = MessageDigest.getInstance("SHA1")
    newFile.eachByte 1024 * 1024, { byte[] buf, int bytesRead ->
        messageDigest.update(buf, 0, bytesRead);
    }
    def sha1Hex = new BigInteger(1, messageDigest.digest()).toString(16).padLeft(40, '0')
    def shaName = name.substring(0, name.length() - 4) + ".jar.pack.gz.sha1"
    def shaFile = new File(targetPath, shaName)
    if (!shaFile.exists()) shaFile.createNewFile()
    shaFile.append sha1Hex
}

task nbmPack (type: Jar, dependsOn: jar) {
    dependsOn nbmFile
    doLast {
        jar.outputs.files.each { packGZ(it) }
        from configurations.runtime.findAll { !configurations.providedCompile.contains(it) }.each { packGZ(it) }
        //        packGZ(tasks.nbm.outputFile)
    }
}

nbm {
    moduleAuthor = 'ExBin Project'
    licenseFile = 'LICENSE.txt'
    homePage = project.ext.homePageUrl
    moduleName = group
    specificationVersion = project.ext.nbmVersion
    implementationVersion = project.ext.nbmVersion
    if (VersionNumber.parse(gradle.gradleVersion) >= VersionNumber.parse('5.0')) {
        // usePack200 = false
    }
    //    moduleInstall = 'org.netbeans.gradle.project.NbGradleModuleInstall'
    localizingBundle = 'org/exbin/bined/netbeans/Bundle.properties'
    friendPackages {
        add('org.exbin.bined.netbeans.api.*')
    }
//    recommendsPackages {
//        add('org.exbin.bined.netbeans.api.*')
//    }

// Uncomment for releases for self-signing nbm
//    keyStore {
//         keyStoreFile = project.file('private/keystore') //tryGetProperty('nbGradlePluginKeyStore', 'keystore')
//         username = tryGetProperty('nbGradlePluginKeyStoreUser', 'bined')
//         password = tryGetProperty('nbGradlePluginKeyStorePass', '')
//    }
}

def netbeansModule = { String groupName, String moduleName ->
    return [
        group: groupName,
        name: moduleName,
        version: netbeansVersion
    ]
}

def netbeansApi = { String moduleName ->
    return netbeansModule('org.netbeans.api', moduleName)
}

def binedLibrary = { String libName ->
    return (binedLibraryVersion.endsWith('-SNAPSHOTX')) ? ":${libName}-${binedLibraryVersion}" : "org.exbin.bined:${libName}:${binedLibraryVersion}"
}

def binedAppLibrary = { String libName ->
    return (binedAppLibraryVersion.endsWith('-SNAPSHOTX')) ? ":${libName}-${binedAppLibraryVersion}" : "org.exbin.framework:${libName}:${binedAppLibraryVersion}"
}

def exbinFrameworkLibrary = { String libName ->
    return (exbinFrameworkVersion.endsWith('-SNAPSHOTX')) ? ":${libName}-${exbinFrameworkVersion}" : "org.exbin.framework:${libName}:${exbinFrameworkVersion}"
}

def binaryDataLibrary = { String libName ->
    return (binaryDataVersion.endsWith('-SNAPSHOTX')) ? ":${libName}-${binaryDataVersion}" : "org.exbin.auxiliary:${libName}:${binaryDataVersion}"
}

dependencies {
    providedCompile netbeansApi('org-netbeans-api-annotations-common')
    providedCompile netbeansApi('org-netbeans-core-multiview')
    providedCompile netbeansApi('org-netbeans-modules-options-api')
    providedCompile netbeansApi('org-netbeans-modules-queries')
    providedCompile netbeansApi('org-netbeans-modules-settings')
    providedCompile netbeansApi('org-openide-actions')
    providedCompile netbeansApi('org-openide-awt')
    providedCompile netbeansApi('org-openide-dialogs')
    providedCompile netbeansApi('org-openide-filesystems')
    providedCompile netbeansApi('org-openide-loaders')
    providedCompile netbeansApi('org-openide-modules')
    providedCompile netbeansApi('org-openide-nodes')
    providedCompile netbeansApi('org-openide-text')
    providedCompile netbeansApi('org-openide-util')
    providedCompile netbeansApi('org-openide-util-lookup')
    providedCompile netbeansApi('org-openide-util-ui')
    providedCompile netbeansApi('org-openide-windows')

    // Ideally we would like debugger group to be optional so that plugin could work for other netbeans platform apps
    // compileOnly doesn't work as optional dependency
    providedCompile netbeansApi('org-netbeans-api-debugger')
    providedCompile netbeansApi('org-netbeans-api-debugger-jpda')
    providedCompile netbeansApi('org-netbeans-spi-debugger-ui')
    providedCompile netbeansApi('org-netbeans-spi-debugger-jpda-ui')
    providedCompile netbeansApi('org-netbeans-spi-viewmodel')
    providedCompile netbeansApi('org-netbeans-modules-diff')
    providedCompile netbeansModule('org.netbeans.modules', 'org-netbeans-modules-projectapi-nb')

    implementation(exbinFrameworkLibrary("exbin-framework"))
    implementation(exbinFrameworkLibrary("exbin-framework-basic"))
    implementation(exbinFrameworkLibrary("exbin-framework-frame"))
    implementation(exbinFrameworkLibrary("exbin-framework-ui"))
    implementation(exbinFrameworkLibrary("exbin-framework-ui-theme"))
    implementation(exbinFrameworkLibrary("exbin-framework-ui-theme-api"))
    implementation(exbinFrameworkLibrary("exbin-framework-component"))
//    implementation(exbinFrameworkLibrary("exbin-framework-data"))
    implementation(exbinFrameworkLibrary("exbin-framework-window"))
    implementation(exbinFrameworkLibrary("exbin-framework-action"))
    implementation(exbinFrameworkLibrary("exbin-framework-file"))
    implementation(exbinFrameworkLibrary("exbin-framework-editor"))
    implementation(exbinFrameworkLibrary("exbin-framework-about-api"))
    implementation(exbinFrameworkLibrary("exbin-framework-about"))
    implementation(exbinFrameworkLibrary("exbin-framework-operation"))
    implementation(exbinFrameworkLibrary("exbin-framework-operation-undo"))
    implementation(exbinFrameworkLibrary("exbin-framework-menu-api"))
    implementation(exbinFrameworkLibrary("exbin-framework-menu"))
    implementation(exbinFrameworkLibrary("exbin-framework-menu-popup"))
    implementation(exbinFrameworkLibrary("exbin-framework-toolbar-api"))
    implementation(exbinFrameworkLibrary("exbin-framework-toolbar"))
    implementation(exbinFrameworkLibrary("exbin-framework-help-api"))
    implementation(exbinFrameworkLibrary("exbin-framework-help"))
    implementation(exbinFrameworkLibrary("exbin-framework-help-online"))
    implementation(exbinFrameworkLibrary("exbin-framework-options"))
    implementation(exbinFrameworkLibrary("exbin-framework-options-api"))
    implementation(exbinFrameworkLibrary("exbin-framework-preferences-api"))
    implementation(exbinFrameworkLibrary("exbin-framework-preferences"))
    implementation(exbinFrameworkLibrary("exbin-framework-language-api"))
    implementation(exbinFrameworkLibrary("exbin-framework-language"))
    implementation(exbinFrameworkLibrary("exbin-framework-text-encoding"))
    implementation(exbinFrameworkLibrary("exbin-framework-text-font"))
    implementation(binedAppLibrary("exbin-framework-bined"))
    implementation(binedAppLibrary("exbin-framework-bined-viewer"))
    implementation(binedAppLibrary("exbin-framework-bined-editor"))
    implementation(binedAppLibrary("exbin-framework-bined-theme"))
    implementation(binedAppLibrary("exbin-framework-bined-bookmarks"))
    implementation(binedAppLibrary("exbin-framework-bined-compare"))
    implementation(binedAppLibrary("exbin-framework-bined-inspector"))
    implementation(binedAppLibrary("exbin-framework-bined-macro"))
    implementation(binedAppLibrary("exbin-framework-bined-objectdata"))
    implementation(binedAppLibrary("exbin-framework-bined-operation"))
    implementation(binedAppLibrary("exbin-framework-bined-operation-bouncycastle"))
    implementation(binedAppLibrary("exbin-framework-bined-search"))
    implementation(binedAppLibrary("exbin-framework-bined-tool-content"))
    implementation(binedLibrary("bined-core"))
    implementation(binedLibrary("bined-section"))
    implementation(binedLibrary("bined-highlight-swing"))
    implementation(binedLibrary("bined-operation"))
    implementation(binedLibrary("bined-operation-swing"))
    implementation(binedLibrary("bined-swing"))
    implementation(binedLibrary("bined-swing-section"))
    implementation(binaryDataLibrary("binary_data"))
    implementation(binaryDataLibrary("binary_data-array"))
    implementation(binaryDataLibrary("binary_data-delta"))
    implementation(binaryDataLibrary("component-dropdownbutton"))
    implementation(":exbin-framework-language-cs_CZ-0.2.4")
    implementation(":exbin-framework-language-de_DE-0.2.4")
    implementation(":exbin-framework-language-es_ES-0.2.4")
    implementation(":exbin-framework-language-fr_FR-0.2.4")
    implementation(":exbin-framework-language-it_IT-0.2.4")
    implementation(":exbin-framework-language-ja_JP-0.2.4")
    implementation(":exbin-framework-language-ko_KR-0.2.4")
    implementation(":exbin-framework-language-pl_PL-0.2.4")
    implementation(":exbin-framework-language-ru_RU-0.2.4")
    implementation(":exbin-framework-language-zh_Hans-0.2.4")
    implementation(":exbin-framework-language-zh_Hant-0.2.4")
    implementation(":exbin-framework-material-iconset-0.2.4")
    implementation(":flatlaf-desktop-3.2")

    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk18on', version: '1.78.1'

//    testImplementation 'junit:junit:4.12.2'

    if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
        // Workaround for @javax.annotation.Generated
        // see: https://github.com/grpc/grpc-java/issues/3633
        implementation("javax.annotation:javax.annotation-api:1.3.2")
    }
}

task sourcesJar(type: Jar, dependsOn: classes, description: 'Creates a jar from the source files.') {
    if (VersionNumber.parse(gradle.gradleVersion) >= VersionNumber.parse('5.0')) {
        archiveClassifier = 'sources'
    } else {
    	classifier = 'sources'
    }

    duplicatesStrategy = 'exclude'
    from sourceSets.main.allSource
}

// Uncomment for publishing via "publish uploadArchives"
// uploadArchives.dependsOn tasks.nbm
publish.dependsOn tasks.nbm
artifacts {
    archives jar
    archives sourcesJar
    tests testJar
}

task netBeansRun(type: Exec) {
    doFirst {
        def confFile = project.file("$project.buildDir/testuserdir/etc/netbeans.conf")
        confFile.parentFile.mkdirs()
        confFile.write "netbeans_extraclusters=\"$project.buildDir/module\""
    }

    workingDir "${project.buildDir}"

    def executable = System.getProperty('os.name').toLowerCase().contains('windows') ? 'netbeans.exe' : 'netbeans'
    if (project.hasProperty('netBeansInstallDir')) {
        executable = netBeansInstallDir + '/bin/' + executable
    } else {
        logger.warn('netBeansInstallDir property is not specified. Assuming \'netbeans\' executable is on PATH.')
    }
    commandLine executable, '--userdir', "$project.buildDir/testuserdir"
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar {
                if (VersionNumber.parse(gradle.gradleVersion) >= VersionNumber.parse('5.0')) {
                    archiveClassifier = 'sources'
                } else {
                    classifier = 'sources'
                }
            }
            artifact (javadocJar) {
                classifier = 'javadoc'
            }
            artifact (nbmFile) {
                classifier = 'nbm'
                extension = 'nbm'
            }

            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name deployName
                    pom.packaging 'nbm'
                    description deployDescription
                    url deployUrl
                    scm {
                        url "https://github.com/exbin/${repositoryName}"
                        connection "cm:git:git://github.com/exbin/${repositoryName}.git"
                        developerConnection "scm:git:git@github.com:exbin/${repositoryName}.git"
                    }
                    licenses {
                        license {
                            name 'Apache License, Version 2.0'
                            url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    organization {
                        name 'ExBin Project'
                        url 'https://exbin.org/'
                    }
                    developers {
                        developer {
                            id 'HajdaM'
                            name 'Miroslav Hajda'
                            email 'hajdam@users.sf.net'
                        }
                    }
                }
            }
        }
    }

    repositories {
        mavenLocal()
    }
}

if (gradle.startParameter.taskNames.contains("uploadArchives") && !version.endsWith('-SNAPSHOT')) {

    configurations {
        releaseArtifacts {}
    }
    
    artifacts {
        archives javadocJar, sourcesJar

        archives (tasks.nbm.outputFile) {
            name = "${project.name}-${project.version}"
            extension = 'nbm'
            type = 'nbm'
        }

        releaseArtifacts jar
        releaseArtifacts (tasks.nbm.outputFile) {
            name = "${project.name}-${project.version}"
            extension = 'nbm'
            type = 'nbm'
        }
        releaseArtifacts javadocJar
        releaseArtifacts sourcesJar
    }

// Uncomment when using, breaks with newer gradle versions
//    signing {
//        sign tasks.nbm.outputFile
//        sign configurations.releaseArtifacts
//    }

    // Old publishing, because newer might not work
    // Needs 'maven' plugin too
    uploadArchives {
        repositories {
            mavenDeployer {
            	// Uncomment when using, breaks with newer gradle versions
                // beforeDeployment {
                //    MavenDeployment deployment -> signing.signPom(deployment)
                // }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name deployName
                    packaging 'nbm'
                    description deployDescription
                    url deployUrl

                    scm {
                        url "https://github.com/exbin/${repositoryName}"
                        connection "cm:git:git://github.com/exbin/${repositoryName}.git"
                        developerConnection "scm:git:git@github.com:exbin/${repositoryName}.git"
                    }
                    licenses {
                        license {
                            name 'Apache License, Version 2.0'
                            url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    organization {
                        name 'ExBin Project'
                        url 'https://exbin.org/'
                    }
                    developers {
                        developer {
                            id 'HajdaM'
                            name 'Miroslav Hajda'
                            email 'hajdam@users.sf.net'
                        }
                    }
                }
            }
        }
    }
}
